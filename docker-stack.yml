version: '3.3'

networks:
  # network to keep postgres database isolated
  dbnetwork:

configs:
  esg-trust-bundle:
    file: $ESGF_CONFIG/certificates/esg-trust-bundle.pem
  # FIXME
  nginx-conf:
    file: /Users/cinquini/eclipse-workspace/esgf-docker/esgf.conf
  #tomcat-conf:
  #  file: /Users/cinquini/eclipse-workspace/esgf-docker/server.xml

secrets:
  database-password:
    file: $ESGF_CONFIG/secrets/database-password
  database-publisher-password:
    file: $ESGF_CONFIG/secrets/database-publisher-password
  rootadmin-password:
    file: $ESGF_CONFIG/secrets/rootadmin-password
  hostcert:
    file: $ESGF_CONFIG/certificates/hostcert/hostcert.crt
  hostkey: 
    file: $ESGF_CONFIG/certificates/hostcert/hostcert.key
  shared-cookie-secret-key:
    file: $ESGF_CONFIG/secrets/shared-cookie-secret-key

services:

  # ESGF postgres database
  esgf-postgres:
    image: "${ESGF_HUB}/esgf-postgres:${ESGF_VERSION}"
    networks:
      - dbnetwork
    ports:
      - "5432:5432"
    environment:
      DBSUPER_PASSWORD_FILE: /esg/secrets/database-password
      ESGCET_PASSWORD_FILE: /esg/secrets/database-publisher-password
      ESGF_ROOTADMIN_EMAIL: "CoG@${ESGF_HOSTNAME}"
      ESGF_ROOTADMIN_USERNAME: rootAdmin
      ESGF_ROOTADMIN_OPENID: https://${ESGF_HOSTNAME}/esgf-idp/openid/rootAdmin
      ESGF_ROOTADMIN_PASSWORD_FILE: /esg/secrets/rootadmin-password
    secrets:
      - source: database-password
        target: /esg/secrets/database-password
      - source: database-publisher-password
        target: /esg/secrets/database-publisher-password
      - source: rootadmin-password
        target: /esg/secrets/rootadmin-password
    volumes:
      - postgres-data:/var/lib/pgsql/data
    deploy:
      placement:
        constraints: [node.labels.esgf_db_node == true]
      
  # ESGF Identity Provider  
  esgf-idp-node:
    image: "${ESGF_HUB}/esgf-idp-node:${ESGF_VERSION}"
    networks:
      - default
      - dbnetwork
    ports:
      - "8081:8080"
    environment: 
      ESGF_HOSTNAME:
      ESGF_DATABASE_HOST: esgf-postgres
    secrets:
    - source: database-password
      target: /esg/config/.esg_pg_pass
    - source: rootadmin-password
      target: /esg/secrets/rootadmin-password
    configs:
      - source: esg-trust-bundle
        target: /esg/certificates/esg-trust-bundle.pem 
    depends_on:
      - esgf-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_idp_node == true]
        
#  # TDS 
#  esgf-tds:
#    image: "${ESGF_HUB}/esgf-tds:${ESGF_VERSION}"
#    ports:
#      - "8082:8080"
#    networks:
#      - default
#    environment:
#      ESGF_HOSTNAME:
#      ESGF_DATABASE_HOST: esgf-postgres
#      ESGF_COOKIE_SECRET_KEY_FILE: /esg/secrets/shared-cookie-secret-key
#      ESGF_TDS_ADMIN_PASSWORD_FILE: /esg/secrets/rootadmin-password
#    volumes:
#      - "tds-content:/esg/content/thredds"
#      - "esg-data:/esg/data"
#    secrets:
#      - source: rootadmin-password
#        target: /esg/secrets/rootadmin-password
#      - source: shared-cookie-secret-key
#        target: /esg/secrets/shared-cookie-secret-key
#    configs: 
#      - source: esg-trust-bundle
#        target: /esg/certificates/esg-trust-bundle.pem 
#    depends_on:
#      - esgf-postgres
#    deploy:
#      replicas: 1
#      placement:
#        constraints: [node.labels.esgf_data_node == true]
    
  #Â Zookeeper
  esgf-zookeeper:
    image: "zookeeper:3.4"
    restart: always
    networks:
      - default
    expose:
      - "2181"
      - "2888"
      - "3888"
    volumes:
      - "zk-data:/data"
      - "zk-datalog:/datalog"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_index_node == true]
       
  # Solr 
  esgf-solr:
    image: "${ESGF_HUB}/esgf-solr:${ESGF_VERSION}"
    restart: always
    networks:
      - default
    ports:
      - "8983:8983"
    environment:
      SOLR_HOME: /esg/solr-home
      SOLR_HEAP: 1g
      ZOOKEEPER_HOST: esgf-zookeeper
    command:
      - "solr-foreground"
      - "-c"
      - "-p"
      - "8983"
      - "-z"
      - "esgf-zookeeper:2181"
      - "-s"
      - "/esg/solr-home"
    volumes:
      - "solr-home:/esg/solr-home"
      - "solr-index:/esg/solr-index"
    depends_on:
      - esgf-zookeeper
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_index_node == true]

  # ESGF Index Node aka ESGF Search web application
  esgf-index-node:
    image: "${ESGF_HUB}/esgf-index-node:${ESGF_VERSION}"
    ports:
      - "8083:8080"
    restart: always
    networks:
      - default 
    environment:
      ESGF_HOSTNAME:
      ESGF_SOLR_HOSTNAME: esgf-solr:8983
      ESGF_DATABASE_HOST: esgf-postgres
    configs: 
      - source: esg-trust-bundle
        target: /esg/certificates/esg-trust-bundle.pem 
    depends_on:
      - esgf-solr
    # FIXME
    #entrypoint:
    #  - "tail"
    #  - "-f"
    #  - "/dev/null"
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_index_node == true]
 
        
  # ESGF proxy
#  esgf-proxy:
#    image: "${ESGF_HUB}/esgf-proxy:${ESGF_VERSION}"
#    networks: 
#      - default
#    ports:
#      - "80:80"
#      - "443:443"
#    environment: 
#      ESGF_HOSTNAME:
#      ESGF_SOLR_UPSTREAM: http://esgf-solr:8983
#      ESGF_INDEX_NODE_UPSTREAM: http://esgf-index-node:8080
#      ESGF_TDS_UPSTREAM: http://esgf-tds:8080
#      ESGF_COG_UPSTREAM: http://esgf-cog:8000
#      ESGF_ORP_UPSTREAM: http://esgf-orp:8080
#      ESGF_IDP_UPSTREAM: http://esgf-idp-node:8080
#      ESGF_SLCS_UPSTREAM: http://esgf-slcs:8000
#      ESGF_AUTH_UPSTREAM: http://esgf-auth:8000
#    secrets:
#    - source: hostcert
#      target: /etc/nginx/ssl/hostcert.crt
#    - source: hostkey
#      target: /etc/nginx/ssl/hostcert.key
#    configs:
#      - source: esg-trust-bundle
#        target: /esg/certificates/esg-trust-bundle.pem 
#      # FIXME
#      - source: nginx-conf
#        target: /etc/nginx/conf.d/esgf.conf
#    deploy:
#      replicas: 1
#      placement:
#        constraints: [node.labels.esgf_front_node == true]

  
# Use Docker volumes to store persistent data
volumes:
  zk-data:
  zk-datalog:
  solr-home:
  postgres-data:
  tds-content:
  slcs-postgres-data:
  slcs-trustroots:
  auth-postgres-data:
  esg-data:
  solr-index:
  
